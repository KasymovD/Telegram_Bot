import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import TOKEN
from main import unique_list_update

inline_btn_1 = InlineKeyboardButton('–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏', callback_data='button1')
inline_btn_2 = InlineKeyboardButton('–ö–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='button2')
inline_btn_3 = InlineKeyboardButton('–ù–æ–≤–æ—Å—Ç–∏ –ú–£–ò–¢', callback_data='button3')
inline_btn_4 = InlineKeyboardButton('–ù–∞—à –°–∞–π—Ç', callback_data='button4', url='https://intuit.kg/faculty/idat')

inline_kb1 = InlineKeyboardMarkup(row_width=2).add(inline_btn_1, inline_btn_2, inline_btn_3, inline_btn_4)

inline_btn_next_1 = InlineKeyboardButton('1Ô∏è‚É£ –î–∏–∑–∞–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ä–µ–¥—ã (–î–ê–°)', callback_data='button_next_1')
inline_btn_next_2 = InlineKeyboardButton('2Ô∏è‚É£ –ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ —à–≤–µ–π–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π (–ö–®–ò)', callback_data='button_next_2')
inline_btn_next_3 = InlineKeyboardButton('3Ô∏è‚É£ –î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ (–î–ò–ó)', callback_data='button_next_3')
inline_btn_next_4 = InlineKeyboardButton('4Ô∏è‚É£ –î–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã (–î–û–î)', callback_data='button_next_4')

btn_send_delete_2 = InlineKeyboardButton('<< –ù–∞–∑–∞–¥', callback_data='new_message_delete')
btn_send_markup_2 = InlineKeyboardMarkup().add(btn_send_delete_2)

inline_kb2 = InlineKeyboardMarkup(row_width=1).add(inline_btn_next_1, inline_btn_next_2, inline_btn_next_3, inline_btn_next_4, btn_send_delete_2)

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

list_1 = unique_list_update
list_1_str = "".join(list_1)


@dp.message_handler(commands=['start'], state='*')
async def process_command_1(message: types.Message):
    await message.reply(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ {message.from_user.first_name}! "
                        "–Ø ‚Äî IdatBot, –≤–∞—à –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è  –≤ InTUIT.IDAT", reply_markup=inline_kb1)


@dp.callback_query_handler(lambda c: c.data == 'button1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ InTUIT.IDAT üë®‚Äçüéìüë©‚Äçüéì', reply_markup=inline_kb2)


@dp.callback_query_handler(lambda c: c.data == 'button2')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, 'Tel: +996706884096\n'
                                                        'Web: https://intuit.kg/faculty/idat\n'
                                                        'Instagram: https://www.instagram.com/intuit.kg/\n'
                                                        '–ê–¥—Ä–µ—Å: 720048, –≥. –ë–∏—à–∫–µ–∫, —É–ª. –ê–Ω–∫–∞—Ä–∞ (–ì–æ—Ä—å–∫–æ–≥–æ), 1/17\n'
                                                        'https://www.google.com/maps/@42.8593913,74.6676174,87m/data=!3m1!1e3', reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'button3')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await callback_query.answer('–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å–∞–π—Ç–∞ https://intuit.kg')
    await bot.send_message(callback_query.from_user.id, list_1_str, reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'button_next_1')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–î–∏–∑–∞–π–Ω –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω–æ–π —Å—Ä–µ–¥—ã (–î–ê–°)\n'
                                                        '\n'
                                                        '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è = 37 000 —Å–æ–º\n'
                                                         '\n'
                                                        '–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è = 5 –ª–µ—Ç\n'
                                                        '\n'
                                                        '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è = –æ—á–Ω–æ\n'
                                                        '\n'
                                                        '–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª = –æ—Ç 105 –∏ –≤—ã—à–µ\n'
                                                        '\n'
                                                        'http://d.zaix.ru/tgyb.pdf', reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'button_next_2')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–ö–æ–Ω—Å—Ç—Ä—É–∏—Ä–æ–≤–∞–Ω–∏–µ —à–≤–µ–π–Ω—ã—Ö –∏–∑–¥–µ–ª–∏–π (–ö–®–ò)\n'
                                                        '\n'
                                                        '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è = 35 000 —Å–æ–º\n'
                                                         '\n'
                                                        '–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è = 4 –≥–æ–¥–∞\n'
                                                        '\n'
                                                        '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è = –æ—á–Ω–æ\n'
                                                        '\n'
                                                        '–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª = –æ—Ç 105 –∏ –≤—ã—à–µ\n'
                                                        '\n'
                                                        'http://d.zaix.ru/tgyn.pdf', reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'button_next_3')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, '–î–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞ (–î–ò–ó)\n'
                                                        '\n'
                                                        '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è = 36 000 —Å–æ–º\n'
                                                         '\n'
                                                        '–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è = 4 –≥–æ–¥–∞\n'
                                                        '\n'
                                                        '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è = –æ—á–Ω–æ\n'
                                                        '\n'
                                                        '–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª = —Å –∏ –±–µ–∑ –û–†–¢\n'
                                                        '\n'
                                                        'http://d.zaix.ru/tgyi.pdf', reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'button_next_4')
async def process_callback_button1(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, '–î–∏–∑–∞–π–Ω –æ–¥–µ–∂–¥—ã (–î–û–î)\n'
                                                        '\n'
                                                        '–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è = 36 000 —Å–æ–º\n'
                                                         '\n'
                                                        '–°—Ä–æ–∫ –æ–±—É—á–µ–Ω–∏—è = 4 –≥–æ–¥–∞\n'
                                                        '\n'
                                                        '–§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è = –æ—á–Ω–æ\n'
                                                        '\n'
                                                        '–ü—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª = —Å –∏ –±–µ–∑ –û–†–¢\n'
                                                        '\n'
                                                        'http://d.zaix.ru/tgyk.pdf', reply_markup=btn_send_markup_2)


@dp.callback_query_handler(lambda c: c.data == 'new_message_delete')
async def send_msg_to_user(callback_query: types.CallbackQuery):
    await bot.delete_message(callback_query.message.chat.id, callback_query.message.message_id)


def main():
    executor.start_polling(dp, skip_updates=True)


if __name__ == '__main__':
    main()
